name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            target: x86_64-linux-gnu
            asset_name: streamdeploy-agent-linux-amd64
          - os: ubuntu-latest
            arch: arm64
            target: aarch64-linux-gnu
            asset_name: streamdeploy-agent-linux-arm64
            cross_compile: true

    steps:
      - uses: actions/checkout@v4

      # Native (amd64) host deps only â€” safe to install libcurl dev for amd64 job
      - name: Install host dependencies (native)
        if: runner.os == 'Linux' && !matrix.cross_compile
        shell: bash
        run: |
          for i in {1..3}; do
            if sudo apt-get update && sudo apt-get install -y \
                 build-essential cmake pkg-config \
                 libcurl4-openssl-dev libssl-dev; then
              break
            elif [ $i -eq 3 ]; then
              echo "Failed to install native deps after 3 attempts"; exit 1
            else
              echo "Attempt $i failed, retrying in 10 seconds..."; sleep 10
            fi
          done

      # Cross job: DO NOT install libcurl dev for amd64 to avoid curl-config conflict
      - name: Install host toolchain (cross job)
        if: runner.os == 'Linux' && matrix.cross_compile
        shell: bash
        run: |
          for i in {1..3}; do
            if sudo apt-get update && sudo apt-get install -y \
                 build-essential cmake pkg-config; then
              break
            elif [ $i -eq 3 ]; then
              echo "Failed to install base host tools after 3 attempts"; exit 1
            else
              echo "Attempt $i failed, retrying in 10 seconds..."; sleep 10
            fi
          done

      - name: Install cross-compilation tools (ARM64)
        if: matrix.cross_compile
        shell: bash
        run: |
          echo "ðŸš€ Setting up ARM64 cross-compilation for Ubuntu 24.04 (Noble)..."

          # Enable arm64 multiarch
          sudo dpkg --add-architecture arm64

          # Ubuntu 24.04 uses ubuntu.sources â€” replace with arch-scoped entries
          sudo rm -f /etc/apt/sources.list
          sudo rm -f /etc/apt/sources.list.d/*.list || true
          sudo rm -f /etc/apt/sources.list.d/ubuntu.sources
          sudo tee /etc/apt/sources.list.d/ubuntu.sources >/dev/null <<'EOF'
          Types: deb
          URIs: http://archive.ubuntu.com/ubuntu
          Suites: noble noble-updates noble-backports
          Components: main restricted universe multiverse
          Architectures: amd64

          Types: deb
          URIs: http://security.ubuntu.com/ubuntu
          Suites: noble-security
          Components: main restricted universe multiverse
          Architectures: amd64

          Types: deb
          URIs: http://ports.ubuntu.com/ubuntu-ports
          Suites: noble noble-updates noble-backports noble-security
          Components: main restricted universe multiverse
          Architectures: arm64
          EOF

          # Cross toolchain + ARM64 dev libs (no amd64 libcurl dev to avoid conflicts)
          for i in {1..3}; do
            if sudo apt-get update && sudo apt-get install -y \
                 gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
                 libcurl4-openssl-dev:arm64 libssl-dev:arm64; then
              break
            elif [ $i -eq 3 ]; then
              echo "Failed apt operations after 3 attempts"; exit 1
            else
              echo "Attempt $i failed, retrying in 10s..."; sleep 10
            fi
          done

          aarch64-linux-gnu-gcc --version
          aarch64-linux-gnu-g++ --version

          echo "âœ… ARM64 toolchain and ports configured."
          ls -l /usr/lib/aarch64-linux-gnu/libcurl* || true
          ls -l /usr/include/aarch64-linux-gnu/curl || true

      - name: Configure CMake
        shell: bash
        run: |
          mkdir -p build
          cd build
          if [ "${{ matrix.cross_compile }}" = "true" ]; then
            echo "ðŸ”§ Configuring CMake for ARM64 cross-compilation..."

            # Point pkg-config at ARM64 .pc files
            export PKG_CONFIG=/usr/bin/pkg-config
            export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig

            # Help CMake prefer ARM64 locations
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                     -DCMAKE_SYSTEM_NAME=Linux \
                     -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
                     -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
                     -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
                     -DCMAKE_FIND_ROOT_PATH="/usr/aarch64-linux-gnu;/usr/lib/aarch64-linux-gnu;/usr/include/aarch64-linux-gnu" \
                     -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
                     -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
                     -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
                     -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \
                     -DPKG_CONFIG_EXECUTABLE=/usr/bin/pkg-config
          else
            echo "ðŸ”§ Configuring CMake for native AMD64 build..."
            cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          fi

      - name: Build
        shell: bash
        run: |
          cd build
          cmake --build . --config ${{ env.BUILD_TYPE }} -j"$(nproc)" || {
            echo "Build failed, showing configuration details:"
            echo "=== CMake Cache ==="
            cat CMakeCache.txt || echo "No CMakeCache.txt found"
            echo "=== Build Directory Contents ==="
            ls -la
            echo "=== CMake Error Log ==="
            cat CMakeFiles/CMakeError.log || echo "No CMakeError.log found"
            exit 1
          }

      - name: Test (native only)
        if: '!matrix.cross_compile'
        working-directory: build
        shell: bash
        run: |
          ./streamdeploy-agent --version || echo "Version check failed, but binary exists"
          file ./streamdeploy-agent

      - name: Prepare artifact
        shell: bash
        run: |
          cd build
          cp streamdeploy-agent ${{ matrix.asset_name }}
          if [ "${{ matrix.cross_compile }}" = "true" ]; then
            aarch64-linux-gnu-strip ${{ matrix.asset_name }} || true
          else
            strip ${{ matrix.asset_name }} || true
          fi
          chmod +x ${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: build/${{ matrix.asset_name }}

  create-installer:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Create install script
        shell: bash
        run: |
          cat > install.sh << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          API_BASE=${API_BASE:-https://api.streamdeploy.com}
          DEVICE_BASE=${DEVICE_BASE:-https://device.streamdeploy.com}
          TOKEN=""
          FORCE=0

          usage() {
            echo "Usage: $0 [--token TOKEN] [--api-base URL] [--device-base URL] [--force]"
          }

          while [[ $# -gt 0 ]]; do
            case "$1" in
              --token) TOKEN="$2"; shift 2;;
              --api-base) API_BASE="$2"; shift 2;;
              --device-base) DEVICE_BASE="$2"; shift 2;;
              --force) FORCE=1; shift;;
              -h|--help) usage; exit 0;;
              *) echo "Unknown arg: $1"; usage; exit 1;;
            esac
          done

          if [[ -z "${TOKEN:-}" && -z "${SD_BOOTSTRAP_TOKEN:-}" ]]; then
            echo "Provide --token or export SD_BOOTSTRAP_TOKEN"; exit 1
          fi
          TOKEN="${TOKEN:-${SD_BOOTSTRAP_TOKEN}}"

          echo "API_BASE=$API_BASE"
          echo "DEVICE_BASE=$DEVICE_BASE"

          # Ensure dependencies (Debian/Ubuntu)
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null || true
            sudo apt-get install -y jq curl openssl python3 build-essential cmake docker.io >/dev/null
            sudo systemctl enable --now docker >/dev/null 2>&1 || true
          fi

          # Try prebuilt binary first, else build from source
          ARCH="$(uname -m)"
          case "$ARCH" in
            x86_64) ASSET="streamdeploy-agent-linux-amd64" ;;
            aarch64|arm64) ASSET="streamdeploy-agent-linux-arm64" ;;
            *) ASSET="";;
          esac

          install_agent_bin() {
            sudo install -m 0755 "$1" /usr/local/bin/streamdeploy-agent
            if [[ ! -f /etc/systemd/system/streamdeploy-agent.service ]]; then
              cat <<'UNIT' | sudo tee /etc/systemd/system/streamdeploy-agent.service >/dev/null
          [Unit]
          Description=StreamDeploy Pull Device Agent
          After=network-online.target docker.service
          Wants=network-online.target docker.service

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/streamdeploy-agent /etc/streamdeploy/agent.json
          Restart=always
          RestartSec=5
          User=root

          [Install]
          WantedBy=multi-user.target
          UNIT
              sudo systemctl daemon-reload
              sudo systemctl enable --now streamdeploy-agent || true
            fi
          }

          if [[ -n "$ASSET" ]]; then
            TMP="$(mktemp -d)"
            cd "$TMP"
            URL="https://github.com/StreamDeploy/streamdeploy-agent/releases/latest/download/$ASSET"
            if curl -fsSLo "$ASSET" "$URL"; then
              chmod +x "$ASSET"
              install_agent_bin "$ASSET"
            else
              echo "No prebuilt $ASSET found, building from source..."
              if curl -fsSL https://github.com/StreamDeploy/streamdeploy-agent/archive/refs/heads/main.tar.gz | tar xz; then
                cd streamdeploy-agent-main/scripts
                sudo bash ./build.sh
              else
                echo "Error: Unable to download source code from GitHub."
                echo "Please check your internet connection and try again."
                exit 1
              fi
            fi
          else
            echo "Unknown arch $(uname -m), building from source..."
            if curl -fsSL https://github.com/StreamDeploy/streamdeploy-agent/archive/refs/heads/main.tar.gz | tar xz; then
              cd streamdeploy-agent-main/scripts
              sudo bash ./build.sh
            else
              echo "Error: Unable to download source code from GitHub."
              echo "Please check your internet connection and try again."
              exit 1
            fi
          fi

          # Minimal config if missing
          sudo mkdir -p /etc/streamdeploy
          if [[ ! -f /etc/streamdeploy/agent.json ]]; then
            echo '{"pki_dir":"/etc/streamdeploy/pki"}' | sudo tee /etc/streamdeploy/agent.json >/dev/null
          fi

          # Fetch enrollment helper from backend and run it
          ENROLLER="$(mktemp)"
          curl -fsSL "$API_BASE/v1-app/enroll/enroll-device.sh" -o "$ENROLLER"
          sudo bash "$ENROLLER" --api-base "$API_BASE" --device-base "$DEVICE_BASE" --token "$TOKEN" ${FORCE:+--force}
          EOF

          chmod +x install.sh

      - name: Upload install script
        uses: actions/upload-artifact@v4
        with:
          name: install.sh
          path: install.sh

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, create-installer]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            streamdeploy-agent-linux-amd64/streamdeploy-agent-linux-amd64
            streamdeploy-agent-linux-arm64/streamdeploy-agent-linux-arm64
            install.sh/install.sh
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-install:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, create-installer]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Test install script syntax
        shell: bash
        run: |
          bash -n install.sh/install.sh
          echo "Install script syntax is valid"
      - name: Test binary execution
        shell: bash
        run: |
          chmod +x streamdeploy-agent-linux-amd64/streamdeploy-agent-linux-amd64
          ./streamdeploy-agent-linux-amd64/streamdeploy-agent-linux-amd64 --version || echo "Version check completed"
