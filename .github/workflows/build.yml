name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# Prevent multiple builds from competing for runners
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30  # Prevent jobs from hanging indefinitely
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            target: x86_64-linux-gnu
            asset_name: streamdeploy-agent-linux-amd64
          - os: ubuntu-latest
            arch: arm64
            target: aarch64-linux-gnu
            asset_name: streamdeploy-agent-linux-arm64
            cross_compile: true

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        # Retry logic for package installation
        for i in {1..3}; do
          if sudo apt-get update && sudo apt-get install -y build-essential cmake libcurl4-openssl-dev libssl-dev; then
            break
          elif [ $i -eq 3 ]; then
            echo "Failed to install dependencies after 3 attempts"
            exit 1
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done

    - name: Install cross-compilation tools (ARM64)
      if: matrix.cross_compile
      run: |
        # Install cross-compilation toolchain and download tools
        for i in {1..3}; do
          if sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkg-config wget curl; then
            break
          elif [ $i -eq 3 ]; then
            echo "Failed to install cross-compilation tools after 3 attempts"
            exit 1
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        # Verify cross-compiler installation
        aarch64-linux-gnu-gcc --version
        aarch64-linux-gnu-g++ --version
        
        # Set up proper ARM64 cross-compilation environment
        ARM64_SYSROOT="/usr/aarch64-linux-gnu"
        echo "Using ARM64 sysroot: $ARM64_SYSROOT"
        echo "CROSS_SYSROOT=$ARM64_SYSROOT" >> $GITHUB_ENV
        
        # Function to download with multiple fallbacks
        download_package() {
          local package_name="$1"
          local urls=("$@")
          urls=("${urls[@]:1}")  # Remove first element (package_name)
          
          for url in "${urls[@]}"; do
            echo "Trying to download $package_name from: $url"
            if wget -q --timeout=30 --tries=3 "$url"; then
              echo "✅ Successfully downloaded $package_name"
              return 0
            else
              echo "❌ Failed to download from $url"
            fi
          done
          
          echo "ERROR: Failed to download $package_name from all URLs"
          return 1
        }
        
        # Download and install ARM64 libcurl packages with multiple fallbacks
        echo "Setting up temporary directory for downloads..."
        TEMP_DIR=$(mktemp -d)
        cd "$TEMP_DIR"
        echo "Working in: $TEMP_DIR"
        
        # Define multiple URLs for each package (different versions and mirrors)
        LIBCURL4_URLS=(
          "http://ports.ubuntu.com/pool/main/c/curl/libcurl4_8.5.0-2ubuntu10.6_arm64.deb"
          "http://ports.ubuntu.com/pool/main/c/curl/libcurl4_8.5.0-2ubuntu10.5_arm64.deb"
          "http://ports.ubuntu.com/pool/main/c/curl/libcurl4_8.5.0-2ubuntu10.4_arm64.deb"
          "http://archive.ubuntu.com/ubuntu/pool/main/c/curl/libcurl4_8.5.0-2ubuntu10.6_arm64.deb"
        )
        
        LIBCURL_DEV_URLS=(
          "http://ports.ubuntu.com/pool/main/c/curl/libcurl4-openssl-dev_8.5.0-2ubuntu10.6_arm64.deb"
          "http://ports.ubuntu.com/pool/main/c/curl/libcurl4-openssl-dev_8.5.0-2ubuntu10.5_arm64.deb"
          "http://ports.ubuntu.com/pool/main/c/curl/libcurl4-openssl-dev_8.5.0-2ubuntu10.4_arm64.deb"
          "http://archive.ubuntu.com/ubuntu/pool/main/c/curl/libcurl4-openssl-dev_8.5.0-2ubuntu10.6_arm64.deb"
        )
        
        # Download packages with fallbacks
        echo "📦 Downloading ARM64 libcurl runtime package..."
        if ! download_package "libcurl4" "${LIBCURL4_URLS[@]}"; then
          echo "FATAL: Could not download libcurl4 ARM64 package"
          exit 1
        fi
        
        echo "📦 Downloading ARM64 libcurl development package..."
        if ! download_package "libcurl4-openssl-dev" "${LIBCURL_DEV_URLS[@]}"; then
          echo "FATAL: Could not download libcurl4-openssl-dev ARM64 package"
          exit 1
        fi
        
        # Verify downloads
        echo "🔍 Verifying downloaded packages..."
        ls -la *.deb
        for deb in *.deb; do
          if [ ! -f "$deb" ]; then
            echo "ERROR: Package $deb not found"
            exit 1
          fi
          echo "✅ Found: $deb ($(du -h "$deb" | cut -f1))"
        done
        
        # Extract packages to sysroot
        echo "📂 Extracting ARM64 libcurl packages to sysroot..."
        for deb in *.deb; do
          echo "Extracting: $deb"
          if ! dpkg-deb -x "$deb" "$ARM64_SYSROOT/"; then
            echo "ERROR: Failed to extract $deb"
            exit 1
          fi
        done
        
        # Clean up
        cd /
        rm -rf "$TEMP_DIR"
        echo "🧹 Cleaned up temporary directory"
        
        # Comprehensive verification
        echo "🔍 Verifying ARM64 sysroot setup..."
        
        # Check basic directories
        for dir in "$ARM64_SYSROOT/lib" "$ARM64_SYSROOT/usr/lib" "$ARM64_SYSROOT/usr/include"; do
          if [ -d "$dir" ]; then
            echo "✅ Directory exists: $dir"
          else
            echo "⚠️  Directory missing: $dir"
          fi
        done
        
        # Find all libcurl files
        echo "🔍 Searching for libcurl files in sysroot..."
        CURL_FILES=$(find "$ARM64_SYSROOT" -name "*curl*" -type f 2>/dev/null || true)
        if [ -n "$CURL_FILES" ]; then
          echo "✅ Found libcurl files:"
          echo "$CURL_FILES" | while read -r file; do
            echo "  📄 $file"
            file "$file" 2>/dev/null || echo "    (file command failed)"
          done
        else
          echo "❌ No libcurl files found in sysroot"
          exit 1
        fi
        
        # Check specific library locations
        echo "🔍 Checking specific library locations..."
        for lib_path in \
          "$ARM64_SYSROOT/usr/lib/aarch64-linux-gnu/libcurl.so.4" \
          "$ARM64_SYSROOT/usr/lib/aarch64-linux-gnu/libcurl.so" \
          "$ARM64_SYSROOT/lib/aarch64-linux-gnu/libcurl.so.4" \
          "$ARM64_SYSROOT/lib/aarch64-linux-gnu/libcurl.so"; do
          if [ -f "$lib_path" ]; then
            echo "✅ Found library: $lib_path"
            file "$lib_path" | grep -q "aarch64" && echo "  ✅ Confirmed ARM64 architecture" || echo "  ⚠️  Architecture check failed"
          fi
        done
        
        # List contents for debugging
        echo "📋 Contents of key directories:"
        ls -la "$ARM64_SYSROOT/usr/lib/aarch64-linux-gnu/" 2>/dev/null | head -20 || echo "No usr/lib/aarch64-linux-gnu directory"
        ls -la "$ARM64_SYSROOT/usr/include/curl/" 2>/dev/null || echo "No curl headers found"
        
        echo "🎉 ARM64 cross-compilation environment setup complete!"

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        if [ "${{ matrix.cross_compile }}" = "true" ]; then
          echo "Configuring for ARM64 cross-compilation..."
          echo "Using sysroot: $CROSS_SYSROOT"
          
          # Set up pkg-config for ARM64 only
          export PKG_CONFIG_PATH=""
          export PKG_CONFIG_LIBDIR="$CROSS_SYSROOT/lib/pkgconfig:$CROSS_SYSROOT/lib/aarch64-linux-gnu/pkgconfig:$CROSS_SYSROOT/usr/lib/pkgconfig:$CROSS_SYSROOT/usr/lib/aarch64-linux-gnu/pkgconfig"
          export PKG_CONFIG_SYSROOT_DIR="$CROSS_SYSROOT"
          
          echo "PKG_CONFIG_LIBDIR: $PKG_CONFIG_LIBDIR"
          echo "PKG_CONFIG_SYSROOT_DIR: $PKG_CONFIG_SYSROOT_DIR"
          
          # Find ARM64 libcurl library
          CURL_LIB_PATH=""
          for path in "$CROSS_SYSROOT/lib/aarch64-linux-gnu/libcurl.so" \
                      "$CROSS_SYSROOT/usr/lib/aarch64-linux-gnu/libcurl.so" \
                      "$CROSS_SYSROOT/lib/libcurl.so" \
                      "$CROSS_SYSROOT/usr/lib/libcurl.so"; do
            if [ -f "$path" ]; then
              CURL_LIB_PATH="$path"
              echo "Found ARM64 libcurl at: $CURL_LIB_PATH"
              break
            fi
          done
          
          if [ -z "$CURL_LIB_PATH" ]; then
            echo "ERROR: Could not find ARM64 libcurl library"
            echo "Available libraries in sysroot:"
            find "$CROSS_SYSROOT" -name "libcurl*" -type f 2>/dev/null || echo "No libcurl found"
            exit 1
          fi
          
          # Configure CMake with explicit ARM64 paths
          cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                   -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
                   -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
                   -DCMAKE_SYSTEM_NAME=Linux \
                   -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
                   -DCMAKE_CROSSCOMPILING=TRUE \
                   -DCMAKE_FIND_ROOT_PATH="$CROSS_SYSROOT" \
                   -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
                   -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
                   -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
                   -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \
                   -DCURL_LIBRARY="$CURL_LIB_PATH" \
                   -DCURL_INCLUDE_DIR="$CROSS_SYSROOT/usr/include" \
                   -DCMAKE_PREFIX_PATH="$CROSS_SYSROOT/usr;$CROSS_SYSROOT" \
                   -DCMAKE_LIBRARY_PATH="$CROSS_SYSROOT/lib/aarch64-linux-gnu:$CROSS_SYSROOT/usr/lib/aarch64-linux-gnu" \
                   -DCMAKE_INCLUDE_PATH="$CROSS_SYSROOT/usr/include"
        else
          cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        fi

    - name: Build
      run: |
        cd build
        cmake --build . --config ${{env.BUILD_TYPE}} -j$(nproc) || {
          echo "Build failed, showing configuration details:"
          echo "=== CMake Cache ==="
          cat CMakeCache.txt || echo "No CMakeCache.txt found"
          echo "=== Build Directory Contents ==="
          ls -la
          echo "=== CMake Error Log ==="
          cat CMakeFiles/CMakeError.log || echo "No CMakeError.log found"
          exit 1
        }

    - name: Test
      if: '!matrix.cross_compile'
      working-directory: build
      run: |
        # Add basic smoke test
        ./streamdeploy-agent --version || echo "Version check failed, but binary exists"
        file ./streamdeploy-agent

    - name: Prepare artifact
      run: |
        cd build
        cp streamdeploy-agent ${{ matrix.asset_name }}
        strip ${{ matrix.asset_name }} || true
        chmod +x ${{ matrix.asset_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: build/${{ matrix.asset_name }}

  create-installer:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Create install script
      run: |
        cat > install.sh << 'EOF'
        #!/usr/bin/env bash
        set -euo pipefail

        API_BASE=${API_BASE:-https://api.streamdeploy.com}
        DEVICE_BASE=${DEVICE_BASE:-https://device.streamdeploy.com}
        TOKEN=""
        FORCE=0

        usage() {
          echo "Usage: $0 [--token TOKEN] [--api-base URL] [--device-base URL] [--force]"
        }

        while [[ $# -gt 0 ]]; do
          case "$1" in
            --token) TOKEN="$2"; shift 2;;
            --api-base) API_BASE="$2"; shift 2;;
            --device-base) DEVICE_BASE="$2"; shift 2;;
            --force) FORCE=1; shift;;
            -h|--help) usage; exit 0;;
            *) echo "Unknown arg: $1"; usage; exit 1;;
          esac
        done

        if [[ -z "${TOKEN:-}" && -z "${SD_BOOTSTRAP_TOKEN:-}" ]]; then
          echo "Provide --token or export SD_BOOTSTRAP_TOKEN"; exit 1
        fi
        TOKEN="${TOKEN:-${SD_BOOTSTRAP_TOKEN}}"

        echo "API_BASE=$API_BASE"
        echo "DEVICE_BASE=$DEVICE_BASE"

        # Ensure dependencies (Debian/Ubuntu)
        if command -v apt-get >/dev/null 2>&1; then
          sudo apt-get update -y >/dev/null || true
          sudo apt-get install -y jq curl openssl python3 build-essential cmake docker.io >/dev/null
          sudo systemctl enable --now docker >/dev/null 2>&1 || true
        fi

        # Try prebuilt binary first, else build from source
        ARCH="$(uname -m)"
        case "$ARCH" in
          x86_64) ASSET="streamdeploy-agent-linux-amd64" ;;
          aarch64|arm64) ASSET="streamdeploy-agent-linux-arm64" ;;
          *) ASSET="";;
        esac

        install_agent_bin() {
          sudo install -m 0755 "$1" /usr/local/bin/streamdeploy-agent
          if [[ ! -f /etc/systemd/system/streamdeploy-agent.service ]]; then
            cat <<'UNIT' | sudo tee /etc/systemd/system/streamdeploy-agent.service >/dev/null
        [Unit]
        Description=StreamDeploy Pull Device Agent
        After=network-online.target docker.service
        Wants=network-online.target docker.service

        [Service]
        Type=simple
        ExecStart=/usr/local/bin/streamdeploy-agent /etc/streamdeploy/agent.json
        Restart=always
        RestartSec=5
        User=root

        [Install]
        WantedBy=multi-user.target
        UNIT
            sudo systemctl daemon-reload
            sudo systemctl enable --now streamdeploy-agent || true
          fi
        }

        if [[ -n "$ASSET" ]]; then
          TMP="$(mktemp -d)"
          cd "$TMP"
          URL="https://github.com/StreamDeploy/streamdeploy-agent/releases/latest/download/$ASSET"
          if curl -fsSLo "$ASSET" "$URL"; then
            chmod +x "$ASSET"
            install_agent_bin "$ASSET"
          else
            echo "No prebuilt $ASSET found, building from source..."
            if curl -fsSL https://github.com/StreamDeploy/streamdeploy-agent/archive/refs/heads/main.tar.gz | tar xz; then
              cd streamdeploy-agent-main/scripts
              sudo bash ./build.sh
            else
              echo "Error: Unable to download source code from GitHub."
              echo "Please check your internet connection and try again."
              exit 1
            fi
          fi
        else
          echo "Unknown arch $(uname -m), building from source..."
          if curl -fsSL https://github.com/StreamDeploy/streamdeploy-agent/archive/refs/heads/main.tar.gz | tar xz; then
            cd streamdeploy-agent-main/scripts
            sudo bash ./build.sh
          else
            echo "Error: Unable to download source code from GitHub."
            echo "Please check your internet connection and try again."
            exit 1
          fi
        fi

        # Minimal config if missing
        sudo mkdir -p /etc/streamdeploy
        if [[ ! -f /etc/streamdeploy/agent.json ]]; then
          echo '{"pki_dir":"/etc/streamdeploy/pki"}' | sudo tee /etc/streamdeploy/agent.json >/dev/null
        fi

        # Fetch enrollment helper from backend and run it
        ENROLLER="$(mktemp)"
        curl -fsSL "$API_BASE/v1-app/enroll/enroll-device.sh" -o "$ENROLLER"
        sudo bash "$ENROLLER" --api-base "$API_BASE" --device-base "$DEVICE_BASE" --token "$TOKEN" ${FORCE:+--force}
        EOF

        chmod +x install.sh

    - name: Upload install script
      uses: actions/upload-artifact@v4
      with:
        name: install.sh
        path: install.sh

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, create-installer]
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          streamdeploy-agent-linux-amd64/streamdeploy-agent-linux-amd64
          streamdeploy-agent-linux-arm64/streamdeploy-agent-linux-arm64
          install.sh/install.sh
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-install:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, create-installer]
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Test install script syntax
      run: |
        bash -n install.sh/install.sh
        echo "Install script syntax is valid"

    - name: Test binary execution
      run: |
        chmod +x streamdeploy-agent-linux-amd64/streamdeploy-agent-linux-amd64
        ./streamdeploy-agent-linux-amd64/streamdeploy-agent-linux-amd64 --version || echo "Version check completed"
